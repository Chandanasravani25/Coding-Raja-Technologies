Task - 1 : Online Banking System

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

// User class representing a banking system user
class User {
    private String username;
    private String password; // Store hashed passwords in real-world scenarios
    private String fullName;

    public User(String username, String password, String fullName) {
        this.username = username;
        this.password = password;
        this.fullName = fullName;
    }

    // Getters and setters
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }
}

// Abstract Account class representing different types of accounts
abstract class Account {
    private String accountNumber;
    private double balance;

    public Account(String accountNumber) {
        this.accountNumber = accountNumber;
        this.balance = 0.0;
    }

    // Abstract method to be implemented by subclasses
    public abstract String getAccountType();

    // Getters and setters
    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}

// Concrete SavingsAccount class extending Account
class SavingsAccount extends Account {
    private double interestRate;

    public SavingsAccount(String accountNumber, double interestRate) {
        super(accountNumber);
        this.interestRate = interestRate;
    }

    @Override
    public String getAccountType() {
        return "Savings Account";
    }

    // Getters and setters specific to SavingsAccount
    public double getInterestRate() {
        return interestRate;
    }

    public void setInterestRate(double interestRate) {
        this.interestRate = interestRate;
    }
}

// Concrete CheckingAccount class extending Account
class CheckingAccount extends Account {
    private double overdraftLimit;

    public CheckingAccount(String accountNumber, double overdraftLimit) {
        super(accountNumber);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public String getAccountType() {
        return "Checking Account";
    }

    // Getters and setters specific to CheckingAccount
    public double getOverdraftLimit() {
        return overdraftLimit;
    }

    public void setOverdraftLimit(double overdraftLimit) {
        this.overdraftLimit = overdraftLimit;
    }
}

// Transaction class representing a banking transaction
class Transaction {
    private LocalDateTime timestamp;
    private String fromAccount;
    private String toAccount;
    private double amount;
    private String description;

    public Transaction(String fromAccount, String toAccount, double amount, String description) {
        this.timestamp = LocalDateTime.now();
        this.fromAccount = fromAccount;
        this.toAccount = toAccount;
        this.amount = amount;
        this.description = description;
    }

    // Getters
    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    public String getFromAccount() {
        return fromAccount;
    }

    public String getToAccount() {
        return toAccount;
    }

    public double getAmount() {
        return amount;
    }

    public String getDescription() {
        return description;
    }
}

// BankingSystem class simulating the operations of an online banking system
public class BankingSystem {
    private Map<String, User> users;
    private Map<String, Account> accounts;
    private Map<String, Transaction> transactions;

    public BankingSystem() {
        this.users = new HashMap<>();
        this.accounts = new HashMap<>();
        this.transactions = new HashMap<>();
    }

    // Method to add a user to the banking system
    public void addUser(User user) {
        users.put(user.getUsername(), user);
    }

    // Method to retrieve a user from the banking system
    public User getUser(String username) {
        return users.get(username);
    }

    // Method to add an account to the banking system
    public void addAccount(Account account) {
        accounts.put(account.getAccountNumber(), account);
    }

    // Method to retrieve an account from the banking system
    public Account getAccount(String accountNumber) {
        return accounts.get(accountNumber);
    }

    // Method to perform a transaction between two accounts
    public void performTransaction(String fromAccountNumber, String toAccountNumber, double amount, String description) {
        Account fromAccount = accounts.get(fromAccountNumber);
        Account toAccount = accounts.get(toAccountNumber);

        if (fromAccount != null && toAccount != null) {
            if (fromAccount.getBalance() >= amount) {
                fromAccount.setBalance(fromAccount.getBalance() - amount);
                toAccount.setBalance(toAccount.getBalance() + amount);

                Transaction transaction = new Transaction(fromAccountNumber, toAccountNumber, amount, description);
                transactions.put(transaction.getTimestamp().toString(), transaction);

                System.out.println("Transaction successful.");
            } else {
                System.out.println("Insufficient funds in the sender's account.");
            }
        } else {
            System.out.println("One or both accounts do not exist.");
        }
    }

    // Main method to simulate banking operations
    public static void main(String[] args) {
        BankingSystem bankingSystem = new BankingSystem();

        // Create users
        User user1 = new User("user1", "password1", "John Doe");
        bankingSystem.addUser(user1);

        // Create accounts
        SavingsAccount savingsAccount = new SavingsAccount("SA001", 0.05);
        CheckingAccount checkingAccount = new CheckingAccount("CA001", 500.0);

        bankingSystem.addAccount(savingsAccount);
        bankingSystem.addAccount(checkingAccount);

        // Perform transactions
        bankingSystem.performTransaction("SA001", "CA001", 100.0, "Transfer from savings to checking");

        // Display account balances after transactions
        System.out.println("Savings Account Balance: " + savingsAccount.getBalance());
        System.out.println("Checking Account Balance: " + checkingAccount.getBalance());
    }
}
